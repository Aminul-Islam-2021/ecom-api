import mongoose from "mongoose";
import slugify from "slugify";

// Product Schema
const productSchema = new mongoose.Schema(
  {
    title: {
      type: String,
      required: [true, "Product title is required"],
      trim: true,
      maxlength: [120, "Product title must not exceed 120 characters"],
    },
    slug: {
      type: String,
      unique: true,
    },
    description: {
      type: String,
      required: [true, "Product description is required"],
      maxlength: [2000, "Product description must not exceed 2000 characters"],
    },
    variants: [
      {
        color: { type: String },
        colorImage: {
          public_id: { type: String }, // Required to avoid null images
          secure_url: { type: String },
        },
        sizes: [
          {
            size: { type: String },
            stock: { type: Number, required: true, default: 0 },
          },
        ],
      },
    ],
    price: {
      type: Number,
      required: [true, "Product price is required"],
      min: [0, "Product price must be a positive number"],
    },
    discount: {
      type: Number,
      default: 0, // Discount in percentage
      min: [0, "Discount must be a positive number"],
      max: [100, "Discount cannot exceed 100%"],
    },
    discountedPrice: {
      type: Number,
      default: 0,
    },
    brand: {
      type: String,
      required: [true, "Product brand is required"],
    },
    category: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Category",
      required: [true, "Product category is required"],
    },
    subcategory: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "SubCategory",
      required: [true, "Product subcategory is required"],
    },
    images: [
      {
        secure_url: { type: String, required: true }, // Cloudinary image URL
        public_id: { type: String, required: true }, // Cloudinary public ID for managing the image (e.g., deleting)
      },
    ],
    sold: {
      type: Number,
      default: 0,
    },
    ratings: {
      type: Number,
      min: 0,
      max: 5,
      default: 0,
    },
    numReviews: {
      type: Number,
      default: 0,
    },
    reviews: [
      {
        user: {
          type: mongoose.Schema.Types.ObjectId,
          ref: "User",
          required: true,
        },
        name: { type: String, required: true },
        rating: { type: Number, required: true, min: 0, max: 5 },
        comment: { type: String },
        createdAt: { type: Date, default: Date.now },
      },
    ],
    isFeatured: {
      type: Boolean,
      default: false,
    },
    tags: {
      type: [String], // For additional keywords or filtering
    },
  },
  { timestamps: true }
);

// Pre-save middleware for Slug and Hybrid Tags

productSchema.pre("save", async function (next) {
  // Slugify the title
  if (this.isModified("title")) {
    this.slug = slugify(this.title, { lower: true, strict: true });
  }

  // Calculate discounted price if a discount is set
  if (this.isModified("price") || this.isModified("discount")) {
    this.discountedPrice = this.discount
      ? this.price - (this.price * this.discount) / 100
      : this.price;
  }

  // Hybrid Approach for Tags
  if (!this.tags || this.tags.length === 0) {
    const category = await mongoose
      .model("Category")
      .findById(this.category)
      .select("name");
    const subcategory = await mongoose
      .model("Subcategory")
      .findById(this.subcategory)
      .select("name");

    // Auto-generate tags from title, brand, category, and subcategory
    const autoGeneratedTags = [
      ...this.title.split(" "), // Split title into words
      this.brand,
      category?.name,
      subcategory?.name,
    ].filter(Boolean); // Remove any undefined or null values

    // Convert tags to lowercase and make them unique
    this.tags = [...new Set(autoGeneratedTags.map((tag) => tag.toLowerCase()))];
  }
  next();
});

export const Product = mongoose.model("Product", productSchema);
